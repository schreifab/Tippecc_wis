
    ClimateFunction(id=0,name='Base flow index', description='Return the base flow index, defined as the minimum 7-day average flow divided by the mean flow.',
        dataset_dict = {
 	 	'q':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.base_flow_index)

    ClimateFunction(id=1,name='Biologically effective growing degree days', description='Growing-degree days with a base of 10°C and an upper limit of 19°C and adjusted for latitudes between 40°N and 50°Nfor April to October (Northern Hemisphere; October to April in Southern Hemisphere). A temperature range adjustmentalso promotes small and large swings in daily temperature range. Used as a heat-summation metric in viticultureagroclimatology.',
        dataset_dict = {
 	 	'tasmin':
 	 	'tasmax':
 	 	'lat':
        },
        params_dict = {
 	 	'thresh_tasmin':
 	 	'method':
 	 	'low_dtr':
 	 	'high_dtr':
 	 	'max_daily_degree_days':
 	 	'start_date':
 	 	'end_date':
 	 	'freq':
        }
        ,climate_func = xclim.indices.biologically_effective_degree_days)

    ClimateFunction(id=2,name='Blowing snow days', description='Number of days when both snowfall over the last days and daily wind speeds are above respective thresholds.',
        dataset_dict = {
 	 	'snd':
 	 	'sfcWind':
        },
        params_dict = {
 	 	'snd_thresh':
 	 	'sfcWind_thresh':
 	 	'window':
 	 	'freq':
        }
        ,climate_func = xclim.indices.blowing_snow)

#done
    ClimateFunction(id=3,name='Calm days', description='The number of days with average near-surface wind speed below threshold (default: 2 m/s).',
        dataset_dict = {
 	 	'sfcWind':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
        }
        ,climate_func = xclim.indices.calm_days)

    ClimateFunction(id=4,name='Canadian Fire Weather Index System indices', description='Computes the 6 fire weather indexes as defined by the Canadian Forest Service: the Drought Code, the Duff-MoistureCode, the Fine Fuel Moisture Code, the Initial Spread Index, the Build Up Index and the Fire Weather Index.',
        dataset_dict = {
 	 	'tas':
 	 	'pr':
 	 	'sfcWind':
 	 	'hurs':
 	 	'lat':
 	 	'snd':
 	 	'ffmc0':
 	 	'dmc0':
 	 	'dc0':
 	 	'season_mask':
        },
        params_dict = {
 	 	'season_method':
 	 	'overwintering':
 	 	'dry_start':
 	 	'initial_start_up':
        }
        ,climate_func = xclim.indices.cffwis_indices)

    ClimateFunction(id=5,name='Scale precipitation according to the Clausius-Clapeyron relation', description='',
        dataset_dict = {
 	 	'delta_tas':
 	 	'pr_baseline':
        },
        params_dict = {
 	 	'cc_scale_factor':
        }
        ,climate_func = xclim.indices.clausius_clapeyron_scaled_precipitation)

    ClimateFunction(id=6,name='Cold and dry days', description='',
        dataset_dict = {
 	 	'tas':
 	 	'pr':
 	 	'tas_per':
 	 	'pr_per':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.cold_and_dry_days)

    ClimateFunction(id=7,name='Cold and wet days', description='',
        dataset_dict = {
 	 	'tas':
 	 	'pr':
 	 	'tas_per':
 	 	'pr_per':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.cold_and_wet_days)

#done
    ClimateFunction(id=8,name='Cold spell days', description='The number of days that are part of cold spell events, defined as a sequence of consecutive days with mean dailytemperature below a threshold (default: -10°C).',
        dataset_dict = {
 	 	'tas':
        },
        params_dict = {
 	 	'thresh':
 	 	'window':
 	 	'freq':
 	 	'op':
 	 	'resample_before_rl':
        }
        ,climate_func = xclim.indices.cold_spell_days)

    ClimateFunction(id=9,name='Cold spell duration index', description='Number of days with at least `window` consecutive days when the daily minimum temperature is below the`tasmin_per` percentiles.',
        dataset_dict = {
 	 	'tasmin':
 	 	'tasmin_per':
        },
        params_dict = {
 	 	'window':
 	 	'freq':
 	 	'resample_before_rl':
 	 	'bootstrap':
 	 	'op':
        }
        ,climate_func = xclim.indices.cold_spell_duration_index)

#done
    ClimateFunction(id=10,name='Cold spell frequency', description='The number of cold spell events, defined as a sequence of consecutive {window} dayswith mean daily temperature below a {thresh}.',
        dataset_dict = {
 	 	'tas':
        },
        params_dict = {
 	 	'thresh':
 	 	'window':
 	 	'freq':
 	 	'op':
 	 	'resample_before_rl':
        }
        ,climate_func = xclim.indices.cold_spell_frequency)
done
    ClimateFunction(id=11,name='Longest cold spell', description='Longest spell of low temperatures over a given period.Longest series of at least {window} consecutive days with temperature at or below {thresh}.',
        dataset_dict = {
 	 	'tas':
        },
        params_dict = {
 	 	'thresh':
 	 	'window':
 	 	'freq':
 	 	'op':
 	 	'resample_before_rl':
        }
        ,climate_func = xclim.indices.cold_spell_max_length)
#done
    ClimateFunction(id=12,name='Total length of cold spells', description='Total length of spells of low temperatures over a given period.Total length of series of at least {window} consecutive days with temperature at or below {thresh}.',
        dataset_dict = {
 	 	'tas':
        },
        params_dict = {
 	 	'thresh':
 	 	'window':
 	 	'freq':
 	 	'op':
 	 	'resample_before_rl':
        }
        ,climate_func = xclim.indices.cold_spell_total_length)

    ClimateFunction(id=13,name='Cool Night Index', description='Mean minimum temperature for September (northern hemisphere) or March (Southern hemisphere).Used in calculating the Géoviticulture Multicriteria Classification System (:cite:t:`tonietto_multicriteria_2004`).Warnings--------This indice is calculated using minimum temperature resampled to monthly average, and therefore will accept monthlyaveraged data as inputs.',
        dataset_dict = {
 	 	'tasmin':
 	 	'lat':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.cool_night_index)

#done
    ClimateFunction(id=14,name='Cooling degree days', description='',
        dataset_dict = {
 	 	'tas':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
        }
        ,climate_func = xclim.indices.cooling_degree_days)

#done
    ClimateFunction(id=15,name='Corn heat units', description='Temperature-based index used to estimate the development of corn crops.Formula adapted from.',
        dataset_dict = {
 	 	'tasmin':
 	 	'tasmax':
        },
        params_dict = {
 	 	'thresh_tasmin':
 	 	'thresh_tasmax':
        }
        ,climate_func = xclim.indices.corn_heat_units)
#done
    ClimateFunction(id=16,name='Average daily precipitation intensity', description='Return the average precipitation over wet days.Wet days are those with precipitation over a given threshold (default: 1 mm/day).',
        dataset_dict = {
 	 	'pr':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
 	 	'op':
        }
        ,climate_func = xclim.indices.daily_pr_intensity)
#done
    ClimateFunction(id=17,name='Statistics of daily temperature range', description='The mean difference between the daily maximum temperature and the daily minimum temperature.',
        dataset_dict = {
 	 	'tasmin':
 	 	'tasmax':
 	 	'op':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.daily_temperature_range)
#done
    ClimateFunction(id=18,name='Mean absolute day-to-day variation in daily temperature range', description='Mean absolute day-to-day variation in daily temperature range.',
        dataset_dict = {
 	 	'tasmin':
 	 	'tasmax':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.daily_temperature_range_variability)

    ClimateFunction(id=19,name='Number of wet days with daily precipitation over a given percentile', description='Number of days over period where the precipitation is above a threshold defining wet days and above a givenpercentile for that day.',
        dataset_dict = {
 	 	'pr':
 	 	'pr_per':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
 	 	'bootstrap':
        }
        ,climate_func = xclim.indices.days_over_precip_thresh)

    ClimateFunction(id=20,name='Days with snow', description='Return the number of days where snowfall is within low and high thresholds.Warnings--------The default `freq` is valid for the northern hemisphere.',
        dataset_dict = {
 	 	'prsn':
        },
        params_dict = {
 	 	'low':
 	 	'high':
 	 	'freq':
        }
        ,climate_func = xclim.indices.days_with_snow)

#done
    ClimateFunction(id=21,name='Degree-days exceedance date', description='Day of year when the sum of degree days exceeds a threshold (default: 25 K days).Degree days are computed above or below a given temperature threshold (default: 0℃).',
        dataset_dict = {
 	 	'tas':
        },
        params_dict = {
 	 	'thresh':
 	 	'sum_thresh':
 	 	'op':
 	 	'freq':
        }
        ,climate_func = xclim.indices.degree_days_exceedance_date)

    ClimateFunction(id=22,name='Drought code (FWI component)', description='The drought code is part of the Canadian Forest Fire Weather Index System.It is a numeric rating of the average moisture content of organic layers.',
        dataset_dict = {
 	 	'tas':
 	 	'pr':
 	 	'lat':
 	 	'snd':
 	 	'dc0':
 	 	'season_mask':
        },
        params_dict = {
 	 	'season_method':
 	 	'overwintering':
 	 	'dry_start':
 	 	'initial_start_up':
        }
        ,climate_func = xclim.indices.drought_code)
#done
    ClimateFunction(id=23,name='Dry days', description='The number of days with daily precipitation below threshold.',
        dataset_dict = {
 	 	'pr':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
 	 	'op':
        }
        ,climate_func = xclim.indices.dry_days)
#done
    ClimateFunction(id=24,name='Return the number of dry periods of n days and more', description='Periods during which the accumulated or maximal daily precipitation amount on a window of n days is under threshold.',
        dataset_dict = {
 	 	'pr':
        },
        params_dict = {
 	 	'thresh':
 	 	'window':
 	 	'freq':
 	 	'resample_before_rl':
        }
        ,climate_func = xclim.indices.dry_spell_frequency)

    ClimateFunction(id=25,name='Longest dry spell', description='Maximum number of consecutive days in a dry period of minimum length, during which the maximum oraccumulated precipitation within a window of the same length is under a threshold.',
        dataset_dict = {
 	 	'pr':
        },
        params_dict = {
 	 	'thresh':
 	 	'window':
 	 	'op':
 	 	'freq':
        }
        ,climate_func = xclim.indices.dry_spell_max_length)

    ClimateFunction(id=26,name='Total length of dry spells', description='Total number of days in dry periods of a minimum length, during which the maximum oraccumulated precipitation within a window of the same length is under a threshold.',
        dataset_dict = {
 	 	'pr':
        },
        params_dict = {
 	 	'thresh':
 	 	'window':
 	 	'op':
 	 	'freq':
        }
        ,climate_func = xclim.indices.dry_spell_total_length)

    ClimateFunction(id=27,name='Dryness Index', description='Approximation of the water balance for the categorizing the winegrowing season. Uses both precipitation and anadjustment of potential evapotranspiration between April and September (Northern Hemisphere) or October and March(Southern hemisphere). Used in calculating the Géoviticulture Multicriteria Classification System(:cite:t:`tonietto_multicriteria_2004`).Warnings--------Dryness Index expects CF-Convention conformant potential evapotranspiration (positive up). This indice is calculatedusing evapotranspiration and precipitation resampled and converted to monthly total accumulations, and thereforewill accept monthly fluxes as inputs.',
        dataset_dict = {
 	 	'pr':
 	 	'evspsblpot':
 	 	'lat':
        },
        params_dict = {
 	 	'wo':
 	 	'freq':
        }
        ,climate_func = xclim.indices.dryness_index)
#done
    ClimateFunction(id=28,name='Effective growing degree days', description='Growing degree days based on a dynamic start and end of the growing season,as defined in :cite:p:`bootsma_impacts_2005`.',
        dataset_dict = {
 	 	'tasmax':
 	 	'tasmin':
        },
        params_dict = {
 	 	'thresh':
 	 	'method':
 	 	'after_date':
 	 	'dim':
 	 	'freq':
        }
        ,climate_func = xclim.indices.effective_growing_degree_days)
#done
    ClimateFunction(id=29,name='Extreme intra-period temperature range', description='The maximum of max temperature (TXx) minus the minimum of min temperature (TNn) for the given time period.',
        dataset_dict = {
 	 	'tasmin':
 	 	'tasmax':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.extreme_temperature_range)

    ClimateFunction(id=30,name='Fire season mask', description='Binary mask of the active fire season, defined by conditions on consecutive daily temperatures and, optionally, snow depths.',
        dataset_dict = {
 	 	'tas':
 	 	'snd':
        },
        params_dict = {
 	 	'method':
 	 	'freq':
 	 	'temp_start_thresh':
 	 	'temp_end_thresh':
 	 	'temp_condition_days':
 	 	'snow_condition_days':
 	 	'snow_thresh':
        }
        ,climate_func = xclim.indices.fire_season)
#done
    ClimateFunction(id=31,name='First day of temperatures superior to a given temperature threshold', description='',
        dataset_dict = {
 	 	'tas':
        },
        params_dict = {
 	 	'thresh':
 	 	'op':
 	 	'after_date':
 	 	'window':
 	 	'freq':
        }
        ,climate_func = xclim.indices.first_day_temperature_above)

#done
ClimateFunction(id=32,name="first day temperature below", description="First day of temperatures inferior to a given temperature threshold",
            dataset_dict = {
                "tas": ds_tas 
                },
            params_dict = {
                "thresh": pa_tas_thresh,
                "op": ClimateParameter("operator", "Comparison operation", [], ['<','<=','lt','le'],'String', False),
                "after_date": ClimateParameter("date", "Date of the year after which to look for the first event. Should have the format mm-dd",[],[],'String',False),
                "window": ClimateParameter("window","Minimum number of days with temperature below threshold needed for evaluation.",[],[],'int',False),
                "freq": pa_freq
                },
            climateFunc=xclim.indices.first_day_temperature_below)

    ClimateFunction(id=33,name='First day with snowfall rate above a threshold', description='',
        dataset_dict = {
 	 	'prsn':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
        }
        ,climate_func = xclim.indices.first_snowfall)

    ClimateFunction(id=34,name='Fraction of precipitation due to wet days with daily precipitation over a given percentile', description='Percentage of the total precipitation over period occurring in days when the precipitation is above a thresholddefining wet days and above a given percentile for that day.',
        dataset_dict = {
 	 	'pr':
 	 	'pr_per':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
 	 	'bootstrap':
        }
        ,climate_func = xclim.indices.fraction_over_precip_thresh)

    ClimateFunction(id=35,name='Frost days index', description='Number of days where daily minimum temperatures are below a threshold temperature.',
        dataset_dict = {
 	 	'tasmin':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
        }
        ,climate_func = xclim.indices.frost_days)

    ClimateFunction(id=36,name='End of the frost free season', description='Day of the year of the start of a sequence of days with minimum temperatures consistently below a threshold(default: 0℃), after a period of `N` days (default: 5) with minimum temperatures consistently above the samethreshold.Warnings--------The default `freq` and `mid_date` parameters are valid for the northern hemisphere.',
        dataset_dict = {
 	 	'tasmin':
        },
        params_dict = {
 	 	'thresh':
 	 	'mid_date':
 	 	'window':
 	 	'freq':
        }
        ,climate_func = xclim.indices.frost_free_season_end)

    ClimateFunction(id=37,name='Frost free season length', description='The number of days between the first occurrence of at least `N` (default: 5) consecutive days with minimum dailytemperature above a threshold (default: 0℃) and the first occurrence of at least `N` consecutive days withminimum daily temperature below the same threshold.A mid-date can be given to limit the earliest day the end of season can take.Warnings--------The default `freq` and `mid_date` parameters are valid for the northern hemisphere.',
        dataset_dict = {
 	 	'tasmin':
        },
        params_dict = {
 	 	'window':
 	 	'mid_date':
 	 	'thresh':
 	 	'freq':
 	 	'op':
        }
        ,climate_func = xclim.indices.frost_free_season_length)

    ClimateFunction(id=38,name='Start of the frost free season', description='Day of the year of the start of a sequence of days with minimum temperatures consistently above or equal to athreshold (default: 0℃), after a period of `N` days (default: 5) with minimum temperatures consistentlyabove the same threshold.',
        dataset_dict = {
 	 	'tasmin':
        },
        params_dict = {
 	 	'thresh':
 	 	'window':
 	 	'freq':
        }
        ,climate_func = xclim.indices.frost_free_season_start)

    ClimateFunction(id=39,name='Longest cold spell', description='Longest spell of low temperatures over a given period.Longest series of at least {window} consecutive days with temperature at or below {thresh}.',
        dataset_dict = {
 	 	'tasmin':
        },
        params_dict = {
 	 	'thresh':
 	 	'window':
 	 	'freq':
 	 	'op':
 	 	'resample_before_rl':
        }
        ,climate_func = xclim.indices.frost_free_spell_max_length)

    ClimateFunction(id=40,name='Frost season length', description='The number of days between the first occurrence of at least `N` (default: 5) consecutive days with minimum dailytemperature under a threshold (default: 0℃) and the first occurrence of at least `N` consecutive days withminimum daily temperature above the same threshold.A mid-date can be given to limit the earliest day the end of season can take.Warnings--------The default `freq` and `mid_date` parameters are valid for the northern hemisphere.',
        dataset_dict = {
 	 	'tasmin':
        },
        params_dict = {
 	 	'window':
 	 	'mid_date':
 	 	'thresh':
 	 	'freq':
 	 	'op':
        }
        ,climate_func = xclim.indices.frost_season_length)

    ClimateFunction(id=41,name='Griffiths drought factor based on the soil moisture deficit', description='The drought factor is a numeric indicator of the forest fire fuel availability in thedeep litter bed. It is often used in the calculation of the McArthur Forest Fire DangerIndex. The method implemented here follows :cite:t:`ffdi-finkele_2006`.',
        dataset_dict = {
 	 	'pr':
 	 	'smd':
        },
        params_dict = {
 	 	'limiting_func':
        }
        ,climate_func = xclim.indices.griffiths_drought_factor)

        ClimateFunction(id=42,name="growing degree days", description="Growing degree-days over threshold temperature value",
            dataset_dict = {
                "tas": ds_tas
                },
            params_dict = {
                "thresh": pa_tas_thresh,
                "freq": pa_freq
                },
            climateFunc=xclim.atmos.growing_degree_days),

    ClimateFunction(id=43,name='End of the growing season', description='Day of the year of the start of a sequence of `N` (default: 5) days with mean temperatures consistently below agiven threshold (default: 5℃), occurring after a given calendar date (default: July 1).Warnings--------The default `freq` and `mid_date` parameters are valid for the northern hemisphere.',
        dataset_dict = {
 	 	'tas':
        },
        params_dict = {
 	 	'thresh':
 	 	'mid_date':
 	 	'window':
 	 	'freq':
        }
        ,climate_func = xclim.indices.growing_season_end)

    ClimateFunction(id=44,name='Growing season length', description='The number of days between the first occurrence of at least `N` (default: 6) consecutive days with mean dailytemperature over a threshold (default: 5℃) and the first occurrence of at least `N` consecutive days with meandaily temperature below the same threshold after a certain date, usually July 1st (06-01) in the northern emispherand January 1st (01-01) in the southern hemisphere.Warnings--------The default `freq` and `mid_date` parameters are valid for the northern hemisphere.',
        dataset_dict = {
 	 	'tas':
        },
        params_dict = {
 	 	'thresh':
 	 	'window':
 	 	'mid_date':
 	 	'freq':
 	 	'op':
        }
        ,climate_func = xclim.indices.growing_season_length)

    ClimateFunction(id=45,name='Start of the growing season', description='Day of the year of the start of a sequence of days with mean daily temperatures consistently above or equal to agiven threshold (default: 5℃).',
        dataset_dict = {
 	 	'tas':
        },
        params_dict = {
 	 	'thresh':
 	 	'window':
 	 	'freq':
        }
        ,climate_func = xclim.indices.growing_season_start)

    ClimateFunction(id=46,name='Hardiness zones', description='Hardiness zones are a categorization of the annual extreme temperature minima, averaged over a certain period.The USDA method defines 14 zones, each divided into two sub-zones, using steps of 5°F, starting at -60°F.The Australian National Botanic Gardens method defines 7 zones, using steps of 5°C, starting at -15°C.',
        dataset_dict = {
 	 	'tasmin':
        },
        params_dict = {
 	 	'window':
 	 	'method':
 	 	'freq':
        }
        ,climate_func = xclim.indices.hardiness_zones)

    ClimateFunction(id=47,name='Heat index', description='Perceived temperature after relative humidity is taken into account :cite:p:`blazejczyk_comparison_2012`.The index is only valid for temperatures above 20°C.',
        dataset_dict = {
 	 	'tas':
 	 	'hurs':
        },
        params_dict = {
        }
        ,climate_func = xclim.indices.heat_index)

    ClimateFunction(id=48,name='Heat wave frequency', description='Number of heat waves over a given period. A heat wave is defined as an event where the minimum and maximum dailytemperature both exceed specific thresholds over a minimum number of days.',
        dataset_dict = {
 	 	'tasmin':
 	 	'tasmax':
        },
        params_dict = {
 	 	'thresh_tasmin':
 	 	'thresh_tasmax':
 	 	'freq':
 	 	'resample_before_rl':
        }
        ,climate_func = xclim.indices.heat_wave_frequency)

    ClimateFunction(id=49,name='Heat wave index', description='Number of days that are part of a heatwave, defined as five or more consecutive days over a threshold of 25℃.',
        dataset_dict = {
 	 	'tasmax':
        },
        params_dict = {
 	 	'thresh':
 	 	'window':
 	 	'freq':
 	 	'op':
 	 	'resample_before_rl':
        }
        ,climate_func = xclim.indices.heat_wave_index)

    ClimateFunction(id=50,name='Heat wave max length', description='Maximum length of heat waves over a given period. A heat wave is defined as an event where the minimum and maximumdaily temperature both exceeds specific thresholds over a minimum number of days.By definition heat_wave_max_length must be >= window.',
        dataset_dict = {
 	 	'tasmin':
 	 	'tasmax':
        },
        params_dict = {
 	 	'thresh_tasmin':
 	 	'thresh_tasmax':
 	 	'window':
 	 	'freq':
 	 	'op':
 	 	'resample_before_rl':
        }
        ,climate_func = xclim.indices.heat_wave_max_length)

    ClimateFunction(id=51,name='Heat wave total length', description='Total length of heat waves over a given period. A heat wave is defined as an event where the minimum and maximumdaily temperature both exceeds specific thresholds over a minimum number of days.This the sum of all days in such events.',
        dataset_dict = {
 	 	'tasmin':
 	 	'tasmax':
        },
        params_dict = {
 	 	'thresh_tasmin':
 	 	'thresh_tasmax':
 	 	'window':
 	 	'freq':
 	 	'resample_before_rl':
        }
        ,climate_func = xclim.indices.heat_wave_total_length)

    ClimateFunction(id=52,name='Heating degree days', description='Sum of degree days below the temperature threshold (default: 17℃) at which spaces are heated.',
        dataset_dict = {
 	 	'tas':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
        }
        ,climate_func = xclim.indices.heating_degree_days)

    ClimateFunction(id=53,name='Number of days with precipitation above threshold and temperature below threshold', description='Number of days when precipitation is greater or equal to some threshold, and temperatures are colder than somethreshold. This can be used for example to identify days with the potential for freezing rain or icing conditions.',
        dataset_dict = {
 	 	'pr':
 	 	'tas':
        },
        params_dict = {
 	 	'pr_thresh':
 	 	'tas_thresh':
 	 	'freq':
        }
        ,climate_func = xclim.indices.high_precip_low_temp)

    ClimateFunction(id=54,name='Hot spell frequency', description='The number of hot spell events, defined as a sequence of consecutive {window} dayswith mean daily temperature above a {thresh}.',
        dataset_dict = {
 	 	'tasmax':
        },
        params_dict = {
 	 	'thresh':
 	 	'window':
 	 	'freq':
 	 	'op':
 	 	'resample_before_rl':
        }
        ,climate_func = xclim.indices.hot_spell_frequency)

    ClimateFunction(id=55,name='Longest hot spell', description='Longest spell of high temperatures over a given period.Longest series of at least {window} consecutive days with temperature at or above {thresh}.',
        dataset_dict = {
 	 	'tasmax':
        },
        params_dict = {
 	 	'thresh':
 	 	'window':
 	 	'freq':
 	 	'op':
 	 	'resample_before_rl':
        }
        ,climate_func = xclim.indices.hot_spell_max_length)

    ClimateFunction(id=56,name='Total length of hot spells', description='Total length of spells of high temperatures over a given period.Total length of series of at least {window} consecutive days with temperature at or above {thresh}.',
        dataset_dict = {
 	 	'tasmax':
        },
        params_dict = {
 	 	'thresh':
 	 	'window':
 	 	'freq':
 	 	'op':
 	 	'resample_before_rl':
        }
        ,climate_func = xclim.indices.hot_spell_total_length)

    ClimateFunction(id=57,name='Huglin Heliothermal Index', description='Growing-degree days with a base of 10°C and adjusted for latitudes between 40°N and 50°N for April-September(Northern Hemisphere; October-March in Southern Hemisphere). Originally proposed in :cite:t:`huglin_nouveau_1978`.Used as a heat-summation metric in viticulture agroclimatology.',
        dataset_dict = {
 	 	'tas':
 	 	'tasmax':
 	 	'lat':
        },
        params_dict = {
 	 	'thresh':
 	 	'method':
 	 	'start_date':
 	 	'end_date':
 	 	'freq':
        }
        ,climate_func = xclim.indices.huglin_index)

    ClimateFunction(id=58,name='Humidex index', description='The humidex indicates how hot the air feels to an average person, accounting for the effect of humidity. Itcan be loosely interpreted as the equivalent perceived temperature when the air is dry.',
        dataset_dict = {
 	 	'tas':
 	 	'tdps':
 	 	'hurs':
        },
        params_dict = {
        }
        ,climate_func = xclim.indices.humidex)

    ClimateFunction(id=59,name='Number of ice/freezing days', description='Number of days when daily maximum temperatures are below a threshold.',
        dataset_dict = {
 	 	'tasmax':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
        }
        ,climate_func = xclim.indices.ice_days)

    ClimateFunction(id=60,name='Isothermality', description='The mean diurnal temperature range divided by the annual temperature range.',
        dataset_dict = {
 	 	'tasmin':
 	 	'tasmax':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.isothermality)

    ClimateFunction(id=61,name='Strength and latitude of jetstream', description='Identify latitude and strength of maximum smoothed zonal wind speed in the region from 15 to 75°N and -60 to 0°E,using the formula outlined in :cite:p:`woollings_variability_2010`. Wind is smoothened using a Lanczos filterapproach.Warnings--------This metric expects eastward wind component (u) to be on a regular grid (i.e. Plate Carree, 1D lat and lon)',
        dataset_dict = {
 	 	'ua':
        },
        params_dict = {
        }
        ,climate_func = xclim.indices.jetstream_metric_woollings)

    ClimateFunction(id=62,name='Keetch-Byram drought index (KBDI) for soil moisture deficit', description='The KBDI indicates the amount of water necessary to bring the soil moisture content back tofield capacity. It is often used in the calculation of the McArthur Forest Fire DangerIndex. The method implemented here follows :cite:t:`ffdi-finkele_2006` but limits themaximum KBDI to 203.2 mm, rather than 200 mm, in order to align best with the majority ofthe literature.',
        dataset_dict = {
 	 	'pr':
 	 	'tasmax':
 	 	'kbdi0':
        },
        params_dict = {
        }
        ,climate_func = xclim.indices.keetch_byram_drought_index)

    ClimateFunction(id=63,name='Last day with snowfall above a threshold', description='',
        dataset_dict = {
 	 	'prsn':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
        }
        ,climate_func = xclim.indices.last_snowfall)

    ClimateFunction(id=64,name='Last day of temperatures inferior to a threshold temperature', description='',
        dataset_dict = {
 	 	'tasmin':
        },
        params_dict = {
 	 	'thresh':
 	 	'op':
 	 	'before_date':
 	 	'window':
 	 	'freq':
        }
        ,climate_func = xclim.indices.last_spring_frost)

    ClimateFunction(id=65,name='Latitude-Temperature Index', description='Mean temperature of the warmest month with a latitude-based scaling factor :cite:p:`jackson_prediction_1988`.Used for categorizing wine-growing regions.',
        dataset_dict = {
 	 	'tas':
 	 	'lat':
        },
        params_dict = {
 	 	'lat_factor':
 	 	'freq':
        }
        ,climate_func = xclim.indices.latitude_temperature_index)

    ClimateFunction(id=66,name='Ratio of rainfall to total precipitation', description='The ratio of total liquid precipitation over the total precipitation. If solid precipitation is not provided,it is approximated with pr, tas and thresh, using the `snowfall_approximation` function with method 'binary'.',
        dataset_dict = {
 	 	'pr':
 	 	'prsn':
 	 	'tas':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
        }
        ,climate_func = xclim.indices.liquid_precip_ratio)

    ClimateFunction(id=67,name='Calculate upwelling thermal radiation from net thermal radiation and downwelling thermal radiation', description='',
        dataset_dict = {
 	 	'rls':
 	 	'rlds':
        },
        params_dict = {
        }
        ,climate_func = xclim.indices.longwave_upwelling_radiation_from_net_downwelling)

    ClimateFunction(id=68,name='Highest 1-day precipitation amount for a period (frequency)', description='Resample the original daily total precipitation temperature series by taking the max over each period.',
        dataset_dict = {
 	 	'pr':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.max_1day_precipitation_amount)

    ClimateFunction(id=69,name='Highest precipitation amount cumulated over a n-day moving window', description='Calculate the n-day rolling sum of the original daily total precipitation seriesand determine the maximum value over each period.',
        dataset_dict = {
 	 	'pr':
        },
        params_dict = {
 	 	'window':
 	 	'freq':
        }
        ,climate_func = xclim.indices.max_n_day_precipitation_amount)

    ClimateFunction(id=70,name='Highest precipitation intensity over a n-hour moving window', description='Calculate the n-hour rolling average of the original hourly total precipitation seriesand determine the maximum value over each period.',
        dataset_dict = {
 	 	'pr':
        },
        params_dict = {
 	 	'window':
 	 	'freq':
        }
        ,climate_func = xclim.indices.max_pr_intensity)

    ClimateFunction(id=71,name='Maximum number of consecutive dry days', description='Return the maximum number of consecutive days within the period where precipitationis below a certain threshold (default: 1 mm/day).',
        dataset_dict = {
 	 	'pr':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
 	 	'resample_before_rl':
        }
        ,climate_func = xclim.indices.maximum_consecutive_dry_days)

    ClimateFunction(id=72,name='Maximum number of consecutive frost days (Tn < 0℃)', description='The maximum number of consecutive days within the period where the minimum daily temperatureis under a given threshold (default: 0°C).Warnings--------The default `freq` is valid for the northern hemisphere.',
        dataset_dict = {
 	 	'tasmin':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
 	 	'resample_before_rl':
        }
        ,climate_func = xclim.indices.maximum_consecutive_frost_days)

    ClimateFunction(id=73,name='Maximum number of consecutive frost free days (Tn >= 0℃)', description='Return the maximum number of consecutive days within the period where the minimum daily temperature isabove or equal to a certain threshold (default: 0℃).Warnings--------The default `freq` is valid for the northern hemisphere.',
        dataset_dict = {
 	 	'tasmin':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
 	 	'resample_before_rl':
        }
        ,climate_func = xclim.indices.maximum_consecutive_frost_free_days)

    ClimateFunction(id=74,name='Maximum number of consecutive days with tasmax above a threshold (summer days)', description='Return the maximum number of consecutive days within the period where the maximum daily temperature isabove a certain threshold (default: 25℃).',
        dataset_dict = {
 	 	'tasmax':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
 	 	'resample_before_rl':
        }
        ,climate_func = xclim.indices.maximum_consecutive_tx_days)

    ClimateFunction(id=75,name='Consecutive wet days', description='',
        dataset_dict = {
 	 	'pr':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
 	 	'resample_before_rl':
        }
        ,climate_func = xclim.indices.maximum_consecutive_wet_days)

    ClimateFunction(id=76,name='McArthur forest fire danger index (FFDI) Mark 5', description='The FFDI is a numeric indicator of the potential danger of a forest fire.',
        dataset_dict = {
 	 	'drought_factor':
 	 	'tasmax':
 	 	'hurs':
 	 	'sfcWind':
        },
        params_dict = {
        }
        ,climate_func = xclim.indices.mcarthur_forest_fire_danger_index)

    ClimateFunction(id=77,name='Mean radiant temperature', description='The mean radiant temperature is the incidence of radiation on the body from all directions.',
        dataset_dict = {
 	 	'rsds':
 	 	'rsus':
 	 	'rlds':
 	 	'rlus':
        },
        params_dict = {
 	 	'stat':
        }
        ,climate_func = xclim.indices.mean_radiant_temperature)

    ClimateFunction(id=78,name='Maximum snow melt and precipitation', description='The maximum snow melt plus precipitation over a given number of days expressed in snow water equivalent.',
        dataset_dict = {
 	 	'snw':
 	 	'pr':
        },
        params_dict = {
 	 	'window':
        }
        ,climate_func = xclim.indices.melt_and_precip_max)

    ClimateFunction(id=79,name='Statistics of consecutive diurnal temperature swing events', description='A diurnal swing of max and min temperature event is when Tmax > thresh_tasmax and Tmin <= thresh_tasmin. This indicefinds all days that constitute these events and computes statistics over the length and frequency of these events.',
        dataset_dict = {
 	 	'tasmin':
 	 	'tasmax':
        },
        params_dict = {
 	 	'thresh_tasmin':
 	 	'thresh_tasmax':
 	 	'window':
 	 	'op':
 	 	'op_tasmin':
 	 	'op_tasmax':
 	 	'freq':
 	 	'resample_before_rl':
        }
        ,climate_func = xclim.indices.multiday_temperature_swing)

    ClimateFunction(id=80,name='Potential evapotranspiration', description='The potential for water evaporation from soil and transpiration by plants if the water supply is sufficient,according to a given method.',
        dataset_dict = {
 	 	'tasmin':
 	 	'tasmax':
 	 	'tas':
 	 	'lat':
 	 	'hurs':
 	 	'rsds':
 	 	'rsus':
 	 	'rlds':
 	 	'rlus':
 	 	'sfcWind':
        },
        params_dict = {
 	 	'method':
 	 	'peta':
 	 	'petb':
        }
        ,climate_func = xclim.indices.potential_evapotranspiration)

    ClimateFunction(id=81,name='Accumulated total precipitation', description='The total accumulated precipitation from days where precipitation exceeds a given amount. A threshold is provided inorder to allow the option of reducing the impact of days with trace precipitation amounts on period totals.',
        dataset_dict = {
 	 	'pr':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
        }
        ,climate_func = xclim.indices.prcptot)

    ClimateFunction(id=82,name='Total precipitation of warmest/coldest quarter', description='The warmest (or coldest) quarter of the year is determined, and the total precipitation of this period iscalculated. If the input data frequency is daily ("D) or weekly ("W"), quarters are defined as 13-week periods,otherwise are 3 months.',
        dataset_dict = {
 	 	'pr':
 	 	'tas':
        },
        params_dict = {
 	 	'op':
 	 	'freq':
        }
        ,climate_func = xclim.indices.prcptot_warmcold_quarter)

    ClimateFunction(id=83,name='Precipitation of the wettest/driest day, week, or month, depending on the time step', description='The wettest (or driest) period is determined, and the total precipitation of this period is calculated.',
        dataset_dict = {
 	 	'pr':
        },
        params_dict = {
 	 	'op':
 	 	'freq':
        }
        ,climate_func = xclim.indices.prcptot_wetdry_period)

    ClimateFunction(id=84,name='Total precipitation of wettest/driest quarter', description='The wettest (or driest) quarter of the year is determined, and the total precipitation of this period is calculated.If the input data frequency is daily ("D") or weekly ("W") quarters are defined as 13-week periods, otherwise arethree (3) months.',
        dataset_dict = {
 	 	'pr':
        },
        params_dict = {
 	 	'op':
 	 	'freq':
        }
        ,climate_func = xclim.indices.prcptot_wetdry_quarter)

    ClimateFunction(id=85,name='Accumulated total (liquid and/or solid) precipitation', description='Resample the original daily mean precipitation flux and accumulate over each period.If a daily temperature is provided, the `phase` keyword can be used to sum precipitation of a given phase only.When the temperature is under the given threshold, precipitation is assumed to be snow, and liquid rain otherwise.This indice is agnostic to the type of daily temperature (tas, tasmax or tasmin) given.',
        dataset_dict = {
 	 	'pr':
 	 	'tas':
        },
        params_dict = {
 	 	'phase':
 	 	'thresh':
 	 	'freq':
        }
        ,climate_func = xclim.indices.precip_accumulation)

    ClimateFunction(id=86,name='Averaged (liquid and/or solid) precipitation', description='Resample the original daily mean precipitation flux and average over each period.If a daily temperature is provided, the `phase` keyword can be used to average precipitation of a given phase only.When the temperature is under the given threshold, precipitation is assumed to be snow, and liquid rain otherwise.This indice is agnostic to the type of daily temperature (tas, tasmax or tasmin) given.',
        dataset_dict = {
 	 	'pr':
 	 	'tas':
        },
        params_dict = {
 	 	'phase':
 	 	'thresh':
 	 	'freq':
        }
        ,climate_func = xclim.indices.precip_average)

    ClimateFunction(id=87,name='Precipitation Seasonality (C of V)', description='The annual precipitation Coefficient of Variation (C of V) expressed in percent. Calculated as the standarddeviation of precipitation values for a given year expressed as a percentage of the mean of those values.',
        dataset_dict = {
 	 	'pr':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.precip_seasonality)

    ClimateFunction(id=88,name='Snowfall rate from snowfall flux and density', description='',
        dataset_dict = {
 	 	'prsn':
 	 	'snr':
        },
        params_dict = {
        }
        ,climate_func = xclim.indices.prsn_to_prsnd)

    ClimateFunction(id=89,name='Snowfall flux from snowfall rate and density', description='',
        dataset_dict = {
 	 	'prsnd':
 	 	'snr':
        },
        params_dict = {
        }
        ,climate_func = xclim.indices.prsnd_to_prsn)

    ClimateFunction(id=90,name='Binomial smoothed, five-day weighted mean average temperature', description='Calculates a five-day weighted moving average with emphasis on temperatures closer to day of interest.',
        dataset_dict = {
 	 	'tas':
        },
        params_dict = {
 	 	'dim':
        }
        ,climate_func = xclim.indices.qian_weighted_mean_average)

    ClimateFunction(id=91,name='Rainfall approximation from total precipitation and temperature', description='Liquid precipitation estimated from precipitation and temperature according to a given method.This is a convenience method based on :py:func:`snowfall_approximation`, see the latter for details.',
        dataset_dict = {
 	 	'pr':
 	 	'tas':
        },
        params_dict = {
 	 	'thresh':
 	 	'method':
        }
        ,climate_func = xclim.indices.rain_approximation)

    ClimateFunction(id=92,name='Number of rain on frozen ground events', description='Number of days with rain above a threshold after a series of seven days below freezing temperature.Precipitation is assumed to be rain when the temperature is above 0℃.',
        dataset_dict = {
 	 	'pr':
 	 	'tas':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
        }
        ,climate_func = xclim.indices.rain_on_frozen_ground_days)

    ClimateFunction(id=93,name='Find the length of the rain season and the day of year of its start and its end', description='The rain season begins when two conditions are met: 1) There must be a number of wet days with precipitations aboveor equal to a given threshold; 2) There must be another sequence following, where, for a given period in time, thereare no dry sequence (i.e. a certain number of days where precipitations are below or equal to a certain threshold).The rain season ends when there is a dry sequence.',
        dataset_dict = {
 	 	'pr':
        },
        params_dict = {
 	 	'thresh_wet_start':
 	 	'window_wet_start':
 	 	'window_not_dry_start':
 	 	'thresh_dry_start':
 	 	'window_dry_start':
 	 	'method_dry_start':
 	 	'date_min_start':
 	 	'date_max_start':
 	 	'thresh_dry_end':
 	 	'window_dry_end':
 	 	'method_dry_end':
 	 	'date_min_end':
 	 	'date_max_end':
 	 	'freq':
        }
        ,climate_func = xclim.indices.rain_season)

    ClimateFunction(id=94,name='Richards-Baker flashiness index', description='Measures oscillations in flow relative to total flow, quantifying the frequency and rapidity of short term changesin flow, based on :cite:t:`baker_new_2004`.',
        dataset_dict = {
 	 	'q':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.rb_flashiness_index)

    ClimateFunction(id=95,name='Relative humidity', description='Compute relative humidity from temperature and either dewpoint temperature or specific humidity and pressure throughthe saturation vapour pressure.',
        dataset_dict = {
 	 	'tas':
 	 	'tdps':
 	 	'huss':
 	 	'ps':
        },
        params_dict = {
 	 	'ice_thresh':
 	 	'method':
 	 	'invalid_values':
        }
        ,climate_func = xclim.indices.relative_humidity)

    ClimateFunction(id=96,name='Proportion of accumulated precipitation arising from convective processes', description='Return the proportion of total accumulated precipitation due to convection on days with total precipitationgreater or equal to a given threshold (default: 1.0 mm/day) during the given period.',
        dataset_dict = {
 	 	'pr':
 	 	'prc':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
 	 	'op':
        }
        ,climate_func = xclim.indices.rprctot)

    ClimateFunction(id=97,name='Saturation vapour pressure from temperature', description='',
        dataset_dict = {
 	 	'tas':
        },
        params_dict = {
 	 	'ice_thresh':
 	 	'method':
        }
        ,climate_func = xclim.indices.saturation_vapor_pressure)

    ClimateFunction(id=98,name='Total sea ice area', description='Sea ice area measures the total sea ice covered area where sea ice concentration is above a threshold,usually set to 15%.',
        dataset_dict = {
 	 	'siconc':
 	 	'areacello':
        },
        params_dict = {
 	 	'thresh':
        }
        ,climate_func = xclim.indices.sea_ice_area)

    ClimateFunction(id=99,name='Total sea ice extent', description='Sea ice extent measures the *ice-covered* area, where a region is considered ice-covered if its sea iceconcentration is above a threshold, usually set to 15%.',
        dataset_dict = {
 	 	'siconc':
 	 	'areacello':
        },
        params_dict = {
 	 	'thresh':
        }
        ,climate_func = xclim.indices.sea_ice_extent)

    ClimateFunction(id=100,name='Highest daily mean wind speed', description='The maximum of daily mean wind speed.',
        dataset_dict = {
 	 	'sfcWind':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.sfcWind_max)

    ClimateFunction(id=101,name='Mean of daily mean wind speed', description='Resample the original daily mean wind speed series by taking the mean over each period.',
        dataset_dict = {
 	 	'sfcWind':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.sfcWind_mean)

    ClimateFunction(id=102,name='Lowest daily mean wind speed', description='The minimum of daily mean wind speed.',
        dataset_dict = {
 	 	'sfcWind':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.sfcWind_min)

    ClimateFunction(id=103,name='Highest maximum wind speed', description='The maximum of daily maximum wind speed.',
        dataset_dict = {
 	 	'sfcWindmax':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.sfcWindmax_max)

    ClimateFunction(id=104,name='Mean of daily maximum wind speed', description='Resample the original daily maximum wind speed series by taking the mean over each period.',
        dataset_dict = {
 	 	'sfcWindmax':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.sfcWindmax_mean)

    ClimateFunction(id=105,name='Lowest daily maximum wind speed', description='The minimum of daily maximum wind speed.',
        dataset_dict = {
 	 	'sfcWindmax':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.sfcWindmax_min)

    ClimateFunction(id=106,name='Eastward and northward wind components from the wind speed and direction', description='Compute the eastward and northward wind components from the wind speed and direction.',
        dataset_dict = {
 	 	'sfcWind':
 	 	'sfcWindfromdir':
        },
        params_dict = {
        }
        ,climate_func = xclim.indices.sfcwind_2_uas_vas)

    ClimateFunction(id=107,name='Calculate upwelling solar radiation from net solar radiation and downwelling solar radiation', description='',
        dataset_dict = {
 	 	'rss':
 	 	'rsds':
        },
        params_dict = {
        }
        ,climate_func = xclim.indices.shortwave_upwelling_radiation_from_net_downwelling)

    ClimateFunction(id=108,name='Maximum snow depth', description='The maximum daily snow depth.',
        dataset_dict = {
 	 	'snw':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.snd_max)

    ClimateFunction(id=109,name='Maximum snow depth day of year', description='Day of year when surface snow reaches its peak value. If snow depth is 0 over entire period, return NaN.',
        dataset_dict = {
 	 	'snd':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.snd_max_doy)

    ClimateFunction(id=110,name='End date of continuous snow depth cover', description='First day after the start of the continuous snow depth cover when snow depth is below a threshold (default: 2 cm)for at least `N` (default: 14) consecutive days.Warnings--------The default `freq` is valid for the northern hemisphere.',
        dataset_dict = {
 	 	'snd':
        },
        params_dict = {
 	 	'thresh':
 	 	'window':
 	 	'freq':
        }
        ,climate_func = xclim.indices.snd_season_end)

    ClimateFunction(id=111,name='The number of days with snow depth above a threshold', description='Number of days where surface snow depth is greater or equal to given threshold (default: 2 cm).Warnings--------The default `freq` is valid for the northern hemisphere.',
        dataset_dict = {
 	 	'snd':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
 	 	'op':
        }
        ,climate_func = xclim.indices.snd_season_length)

    ClimateFunction(id=112,name='Start date of continuous snow depth cover', description='Day of year when snow depth is above or equal to a threshold (default: 2 cm)for at least `N` (default: 14) consecutive days.Warnings--------The default `freq` is valid for the northern hemisphere.',
        dataset_dict = {
 	 	'snd':
        },
        params_dict = {
 	 	'thresh':
 	 	'window':
 	 	'freq':
        }
        ,climate_func = xclim.indices.snd_season_start)

    ClimateFunction(id=113,name='Days with snowfall over threshold', description='Number of days with snowfall depth accumulation greater or equal to threshold (default: 25 cm).Warnings--------The default `freq` is valid for the northern hemisphere.',
        dataset_dict = {
 	 	'snd':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
        }
        ,climate_func = xclim.indices.snd_storm_days)

    ClimateFunction(id=114,name='Snow amount from snow depth and density', description='',
        dataset_dict = {
 	 	'snd':
        },
        params_dict = {
 	 	'snr':
        }
        ,climate_func = xclim.indices.snd_to_snw)

    ClimateFunction(id=115,name='Mean of daily average snow depth', description='Resample the original daily mean snow depth series by taking the mean over each period.',
        dataset_dict = {
 	 	'snd':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.snow_depth)

    ClimateFunction(id=116,name='Maximum snow melt', description='The maximum snow melt over a given number of days expressed in snow water equivalent.',
        dataset_dict = {
 	 	'snw':
        },
        params_dict = {
 	 	'window':
 	 	'freq':
        }
        ,climate_func = xclim.indices.snow_melt_we_max)

    ClimateFunction(id=117,name='Snowfall approximation from total precipitation and temperature', description='Solid precipitation estimated from precipitation and temperature according to a given method.',
        dataset_dict = {
 	 	'pr':
 	 	'tas':
        },
        params_dict = {
 	 	'thresh':
 	 	'method':
        }
        ,climate_func = xclim.indices.snowfall_approximation)

    ClimateFunction(id=118,name='Percentage of snow days', description='Return the percentage of days where snowfall exceeds a threshold (default: 1 mm/day).Warnings--------The default `freq` is valid for the northern hemisphere.',
        dataset_dict = {
 	 	'prsn':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
        }
        ,climate_func = xclim.indices.snowfall_frequency)

    ClimateFunction(id=119,name='Mean daily snowfall rate during snow days', description='Return mean daily snowfall rate during days where snowfall exceeds a threshold (default: 1 mm/day).Warnings--------The default `freq` is valid for the northern hemisphere.',
        dataset_dict = {
 	 	'prsn':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
        }
        ,climate_func = xclim.indices.snowfall_intensity)

    ClimateFunction(id=120,name='Maximum snow amount', description='The maximum daily snow amount.',
        dataset_dict = {
 	 	'snw':
        },
        params_dict = {
        }
        ,climate_func = xclim.indices.snw_max)

    ClimateFunction(id=121,name='Maximum snow amount day of year', description='Day of year when surface snow amount reaches its peak value. If snow amount is 0 over entire period, return NaN.',
        dataset_dict = {
 	 	'snw':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.snw_max_doy)

    ClimateFunction(id=122,name='End date of continuous snow water cover', description='First day after the start of the continuous snow water coverwhen snow water is below a threshold (Current default:  20 kg m-2. xclim >=0.47.0 default: 4 kg m-2)for at least `N` (default: 14) consecutive days.Warnings--------The default `freq` is valid for the northern hemisphere.',
        dataset_dict = {
 	 	'snw':
        },
        params_dict = {
 	 	'thresh':
 	 	'window':
 	 	'freq':
        }
        ,climate_func = xclim.indices.snw_season_end)

    ClimateFunction(id=123,name='The number of days with snow water above a threshold', description='Number of days where surface snow water is greater or equal to given threshold (Current default:  20 kg m-2. xclim >=0.47.0 default: 4 kg m-2).Warnings--------The default `freq` is valid for the northern hemisphere.',
        dataset_dict = {
 	 	'snw':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
 	 	'op':
        }
        ,climate_func = xclim.indices.snw_season_length)

    ClimateFunction(id=124,name='Start date of continuous snow water cover', description='Day of year when snow water is above or equal to a threshold  (Current default:  20 kg m-2. xclim >=0.47.0 default: 4 kg m-2)for at least `N` (default: 14) consecutive days.Warnings--------The default `freq` is valid for the northern hemisphere.',
        dataset_dict = {
 	 	'snw':
        },
        params_dict = {
 	 	'thresh':
 	 	'window':
 	 	'freq':
        }
        ,climate_func = xclim.indices.snw_season_start)

    ClimateFunction(id=125,name='Days with snowfall over threshold', description='Number of days with snowfall amount accumulation greater or equal to threshold (default: 10 kg m-2).Warnings--------The default `freq` is valid for the northern hemisphere.',
        dataset_dict = {
 	 	'snw':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
        }
        ,climate_func = xclim.indices.snw_storm_days)

    ClimateFunction(id=126,name='Snow depth from snow amount and density', description='',
        dataset_dict = {
 	 	'snw':
        },
        params_dict = {
 	 	'snr':
        }
        ,climate_func = xclim.indices.snw_to_snd)

    ClimateFunction(id=127,name='Specific humidity from temperature, relative humidity and pressure', description='Specific humidity is the ratio between the mass of water vapourand the mass of moist air :cite:p:`world_meteorological_organization_guide_2008`.',
        dataset_dict = {
 	 	'tas':
 	 	'hurs':
 	 	'ps':
        },
        params_dict = {
 	 	'ice_thresh':
 	 	'method':
 	 	'invalid_values':
        }
        ,climate_func = xclim.indices.specific_humidity)

    ClimateFunction(id=128,name='Specific humidity from dewpoint temperature and air pressure', description='Specific humidity is the ratio between the mass of water vapourand the mass of moist air :cite:p:`world_meteorological_organization_guide_2008`.',
        dataset_dict = {
 	 	'tdps':
 	 	'ps':
        },
        params_dict = {
 	 	'method':
        }
        ,climate_func = xclim.indices.specific_humidity_from_dewpoint)

    ClimateFunction(id=129,name='Standardized Precipitation Evapotranspiration Index (SPEI)', description='Precipitation minus potential evapotranspiration data (PET) fitted to a statistical distribution (dist), transformedto a cdf,  and inverted back to a gaussian normal pdf. The potential evapotranspiration is calculated with a givenmethod (`method`).',
        dataset_dict = {
 	 	'wb':
 	 	'wb_cal':
 	 	'params':
        },
        params_dict = {
 	 	'freq':
 	 	'window':
 	 	'dist':
 	 	'method':
 	 	'cal_start':
 	 	'cal_end':
 	 	'offset':
        }
        ,climate_func = xclim.indices.standardized_precipitation_evapotranspiration_index)

    ClimateFunction(id=130,name='Standardized Precipitation Index (SPI)', description='',
        dataset_dict = {
 	 	'pr':
 	 	'pr_cal':
 	 	'params':
        },
        params_dict = {
 	 	'freq':
 	 	'window':
 	 	'dist':
 	 	'method':
 	 	'cal_start':
 	 	'cal_end':
        }
        ,climate_func = xclim.indices.standardized_precipitation_index)

    ClimateFunction(id=131,name='Average temperature from minimum and maximum temperatures', description='We assume a symmetrical distribution for the temperature and retrieve the average value as Tg = (Tx + Tn) / 2',
        dataset_dict = {
 	 	'tasmin':
 	 	'tasmax':
        },
        params_dict = {
        }
        ,climate_func = xclim.indices.tas)

    ClimateFunction(id=132,name='Temperature seasonality (coefficient of variation)', description='The annual temperature coefficient of variation expressed in percent. Calculated as the standard deviationof temperature values for a given year expressed as a percentage of the mean of those temperatures.',
        dataset_dict = {
 	 	'tas':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.temperature_seasonality)

    ClimateFunction(id=133,name='Number of days with daily mean temperature below the 10th percentile', description='Number of days with daily mean temperature below the 10th percentile.',
        dataset_dict = {
 	 	'tas':
 	 	'tas_per':
        },
        params_dict = {
 	 	'freq':
 	 	'bootstrap':
        }
        ,climate_func = xclim.indices.tg10p)

    ClimateFunction(id=134,name='Number of days with daily mean temperature over the 90th percentile', description='Number of days with daily mean temperature over the 90th percentile.',
        dataset_dict = {
 	 	'tas':
 	 	'tas_per':
        },
        params_dict = {
 	 	'freq':
 	 	'bootstrap':
        }
        ,climate_func = xclim.indices.tg90p)

    ClimateFunction(id=135,name='The number of days with tas above a threshold', description='Number of days where mean daily temperature exceeds a threshold (default: 10℃).',
        dataset_dict = {
 	 	'tas':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
 	 	'op':
        }
        ,climate_func = xclim.indices.tg_days_above)

    ClimateFunction(id=136,name='The number of days with tas below a threshold', description='Number of days where mean daily temperature is below a threshold (default: 10℃).',
        dataset_dict = {
 	 	'tas':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
 	 	'op':
        }
        ,climate_func = xclim.indices.tg_days_below)

    ClimateFunction(id=137,name='Highest mean temperature', description='The maximum of daily mean temperature.',
        dataset_dict = {
 	 	'tas':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.tg_max)

    ClimateFunction(id=138,name='Mean of daily average temperature', description='Resample the original daily mean temperature series by taking the mean over each period.',
        dataset_dict = {
 	 	'tas':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.tg_mean)

    ClimateFunction(id=139,name='Mean temperature of warmest/coldest quarter', description='The warmest (or coldest) quarter of the year is determined, and the mean temperature of this period is calculated.If the input data frequency is daily ("D") or weekly ("W"), quarters are defined as 13-week periods, otherwise asthree (3) months.',
        dataset_dict = {
 	 	'tas':
        },
        params_dict = {
 	 	'op':
 	 	'freq':
        }
        ,climate_func = xclim.indices.tg_mean_warmcold_quarter)

    ClimateFunction(id=140,name='Mean temperature of wettest/driest quarter', description='The wettest (or driest) quarter of the year is determined, and the mean temperature of this period is calculated.If the input data frequency is daily ("D") or weekly ("W"), quarters are defined as 13-week periods,otherwise are 3 months.',
        dataset_dict = {
 	 	'tas':
 	 	'pr':
        },
        params_dict = {
 	 	'op':
 	 	'freq':
        }
        ,climate_func = xclim.indices.tg_mean_wetdry_quarter)

    ClimateFunction(id=141,name='Lowest mean temperature', description='Minimum of daily mean temperature.',
        dataset_dict = {
 	 	'tas':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.tg_min)

    ClimateFunction(id=142,name='Number of days with daily minimum temperature below the 10th percentile', description='Number of days with daily minimum temperature below the 10th percentile.',
        dataset_dict = {
 	 	'tasmin':
 	 	'tasmin_per':
        },
        params_dict = {
 	 	'freq':
 	 	'bootstrap':
        }
        ,climate_func = xclim.indices.tn10p)

    ClimateFunction(id=143,name='Number of days with daily minimum temperature over the 90th percentile', description='Number of days with daily minimum temperature over the 90th percentile.',
        dataset_dict = {
 	 	'tasmin':
 	 	'tasmin_per':
        },
        params_dict = {
 	 	'freq':
 	 	'bootstrap':
        }
        ,climate_func = xclim.indices.tn90p)

    ClimateFunction(id=144,name='The number of days with tasmin above a threshold (number of tropical nights)', description='Number of days where minimum daily temperature exceeds a threshold (default: 20℃).',
        dataset_dict = {
 	 	'tasmin':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
 	 	'op':
        }
        ,climate_func = xclim.indices.tn_days_above)

    ClimateFunction(id=145,name='Number of days with tasmin below a threshold', description='Number of days where minimum daily temperature is below a threshold (default: -10℃).',
        dataset_dict = {
 	 	'tasmin':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
 	 	'op':
        }
        ,climate_func = xclim.indices.tn_days_below)

    ClimateFunction(id=146,name='Highest minimum temperature', description='The maximum of daily minimum temperature.',
        dataset_dict = {
 	 	'tasmin':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.tn_max)

    ClimateFunction(id=147,name='Mean minimum temperature', description='Mean of daily minimum temperature.',
        dataset_dict = {
 	 	'tasmin':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.tn_mean)

    ClimateFunction(id=148,name='Lowest minimum temperature', description='Minimum of daily minimum temperature.',
        dataset_dict = {
 	 	'tasmin':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.tn_min)

    ClimateFunction(id=149,name='Number of days with daily maximum temperature below the 10th percentile', description='Number of days with daily maximum temperature below the 10th percentile.',
        dataset_dict = {
 	 	'tasmax':
 	 	'tasmax_per':
        },
        params_dict = {
 	 	'freq':
 	 	'bootstrap':
        }
        ,climate_func = xclim.indices.tx10p)

    ClimateFunction(id=150,name='Number of days with daily maximum temperature over the 90th percentile', description='Number of days with daily maximum temperature over the 90th percentile.',
        dataset_dict = {
 	 	'tasmax':
 	 	'tasmax_per':
        },
        params_dict = {
 	 	'freq':
 	 	'bootstrap':
        }
        ,climate_func = xclim.indices.tx90p)

    ClimateFunction(id=151,name='The number of days with tasmax above a threshold (number of summer days)', description='Number of days where maximum daily temperature exceeds a threshold (default: 25℃).',
        dataset_dict = {
 	 	'tasmax':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
 	 	'op':
        }
        ,climate_func = xclim.indices.tx_days_above)

    ClimateFunction(id=152,name='The number of days with tmax below a threshold', description='Number of days where maximum daily temperature is below a threshold (default: 25℃).',
        dataset_dict = {
 	 	'tasmax':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
 	 	'op':
        }
        ,climate_func = xclim.indices.tx_days_below)

    ClimateFunction(id=153,name='Highest max temperature', description='The maximum value of daily maximum temperature.',
        dataset_dict = {
 	 	'tasmax':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.tx_max)

    ClimateFunction(id=154,name='Mean max temperature', description='The mean of daily maximum temperature.',
        dataset_dict = {
 	 	'tasmax':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.tx_mean)

    ClimateFunction(id=155,name='Lowest max temperature', description='The minimum of daily maximum temperature.',
        dataset_dict = {
 	 	'tasmax':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.tx_min)

    ClimateFunction(id=156,name='Number of days with both hot maximum and minimum daily temperatures', description='The number of days per period with tasmin above a threshold and tasmax above another threshold.',
        dataset_dict = {
 	 	'tasmin':
 	 	'tasmax':
        },
        params_dict = {
 	 	'thresh_tasmin':
 	 	'thresh_tasmax':
 	 	'freq':
        }
        ,climate_func = xclim.indices.tx_tn_days_above)

    ClimateFunction(id=157,name='Wind speed and direction from the eastward and northward wind components', description='Computes the magnitude and angle of the wind vector from its northward and eastward components,following the meteorological convention that sets calm wind to a direction of 0° and northerly wind to 360°.',
        dataset_dict = {
 	 	'uas':
 	 	'vas':
        },
        params_dict = {
 	 	'calm_wind_thresh':
        }
        ,climate_func = xclim.indices.uas_vas_2_sfcwind)

    ClimateFunction(id=158,name='Universal thermal climate index (UTCI)', description='The UTCI is the equivalent temperature for the environment derived from areference environment and is used to evaluate heat stress in outdoor spaces.',
        dataset_dict = {
 	 	'tas':
 	 	'hurs':
 	 	'sfcWind':
 	 	'rsds':
 	 	'rsus':
 	 	'rlds':
 	 	'rlus':
        },
        params_dict = {
 	 	'stat':
        }
        ,climate_func = xclim.indices.universal_thermal_climate_index)

    ClimateFunction(id=159,name='Warm and dry days', description='',
        dataset_dict = {
 	 	'tas':
 	 	'pr':
 	 	'tas_per':
 	 	'pr_per':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.warm_and_dry_days)

    ClimateFunction(id=160,name='Warm and wet days', description='',
        dataset_dict = {
 	 	'tas':
 	 	'pr':
 	 	'tas_per':
 	 	'pr_per':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.warm_and_wet_days)

    ClimateFunction(id=161,name='Frequency of extreme warm days', description='Return the number of days with maximum daily temperature exceeding threshold (default: 30℃) per period.',
        dataset_dict = {
 	 	'tasmax':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
 	 	'op':
        }
        ,climate_func = xclim.indices.warm_day_frequency)

    ClimateFunction(id=162,name='Frequency of extreme warm nights', description='Return the number of days with minimum daily temperature exceeding threshold (default: 22℃) per period.',
        dataset_dict = {
 	 	'tasmin':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
 	 	'op':
        }
        ,climate_func = xclim.indices.warm_night_frequency)

    ClimateFunction(id=163,name='Warm spell duration index', description='Number of days inside spells of a minimum number of consecutive days when the daily maximum temperature is above the90th percentile. The 90th percentile should be computed for a 5-day moving window, centered on each calendar day inthe 1961-1990 period.',
        dataset_dict = {
 	 	'tasmax':
 	 	'tasmax_per':
        },
        params_dict = {
 	 	'window':
 	 	'freq':
 	 	'resample_before_rl':
 	 	'bootstrap':
        }
        ,climate_func = xclim.indices.warm_spell_duration_index)

    ClimateFunction(id=164,name='Precipitation minus potential evapotranspiration', description='Precipitation minus potential evapotranspiration as a measure of an approximated surface water budget,where the potential evapotranspiration can be calculated with a given method.',
        dataset_dict = {
 	 	'pr':
 	 	'tasmin':
 	 	'tasmax':
 	 	'tas':
 	 	'lat':
 	 	'hurs':
 	 	'rsds':
 	 	'rsus':
 	 	'rlds':
 	 	'rlus':
 	 	'sfcWind':
        },
        params_dict = {
 	 	'method':
        }
        ,climate_func = xclim.indices.water_budget)

    ClimateFunction(id=165,name='Return the number of wet periods of n days and more', description='Periods during which the accumulated or maximal daily precipitation amount on a window of n days is over threshold.',
        dataset_dict = {
 	 	'pr':
        },
        params_dict = {
 	 	'thresh':
 	 	'window':
 	 	'freq':
 	 	'resample_before_rl':
        }
        ,climate_func = xclim.indices.wet_spell_frequency)

    ClimateFunction(id=166,name='Longest wet spell', description='Maximum number of consecutive days in a wet period of minimum length, during which the maximum oraccumulated precipitation within a window of the same length is over a threshold.',
        dataset_dict = {
 	 	'pr':
        },
        params_dict = {
 	 	'thresh':
 	 	'window':
 	 	'op':
 	 	'freq':
        }
        ,climate_func = xclim.indices.wet_spell_max_length)

    ClimateFunction(id=167,name='Total length of dry spells', description='Total number of days in wet periods of a minimum length, during which the maximum oraccumulated precipitation within a window of the same length is over a threshold.',
        dataset_dict = {
 	 	'pr':
        },
        params_dict = {
 	 	'thresh':
 	 	'window':
 	 	'op':
 	 	'freq':
        }
        ,climate_func = xclim.indices.wet_spell_total_length)

    ClimateFunction(id=168,name='Wet days', description='Return the total number of days during period with precipitation over threshold (default: 1.0 mm/day).',
        dataset_dict = {
 	 	'pr':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
 	 	'op':
        }
        ,climate_func = xclim.indices.wetdays)

    ClimateFunction(id=169,name='Proportion of wet days', description='Return the proportion of days during period with precipitation over threshold (default: 1.0 mm/day).',
        dataset_dict = {
 	 	'pr':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
 	 	'op':
        }
        ,climate_func = xclim.indices.wetdays_prop)

    ClimateFunction(id=170,name='Wind chill index', description='The Wind Chill Index is an estimation of how cold the weather feels to the average person.It is computed from the air temperature and the 10-m wind. As defined by the Environment and Climate Change Canada(:cite:cts:`mekis_observed_2015`), two equations exist, the conventional one and one for slow winds(usually < 5 km/h), see Notes.',
        dataset_dict = {
 	 	'tas':
 	 	'sfcWind':
        },
        params_dict = {
 	 	'method':
 	 	'mask_invalid':
        }
        ,climate_func = xclim.indices.wind_chill_index)

    ClimateFunction(id=171,name='Wind power potential estimated from an idealized wind power production factor', description='The actual power production of a wind farm can be estimated by multiplying its nominal (nameplate) capacity by thewind power potential, which depends on wind speed at the hub height, the turbine specifications and air density.',
        dataset_dict = {
 	 	'wind_speed':
        },
        params_dict = {
 	 	'cut_in':
 	 	'rated':
 	 	'cut_out':
        }
        ,climate_func = xclim.indices.wind_power_potential)

    ClimateFunction(id=172,name='Wind speed at a given height estimated from the wind speed at a reference height', description='Estimate the wind speed based on a power law profile relating wind speed to height above the surface.',
        dataset_dict = {
 	 	'wind_speed':
        },
        params_dict = {
 	 	'h':
 	 	'h_r':
 	 	'method':
 	 	'kwds':
        }
        ,climate_func = xclim.indices.wind_profile)

    ClimateFunction(id=173,name='Windy days', description='The number of days with average near-surface wind speed above threshold (default: 10.8 m/s).',
        dataset_dict = {
 	 	'sfcWind':
        },
        params_dict = {
 	 	'thresh':
 	 	'freq':
        }
        ,climate_func = xclim.indices.windy_days)

    ClimateFunction(id=174,name='Ratio of rainfall to total precipitation during winter', description='The ratio of total liquid precipitation over the total precipitation over the winter months (DJF). If solidprecipitation is not provided, then precipitation is assumed solid if the temperature is below 0°C.',
        dataset_dict = {
 	 	'pr':
 	 	'prsn':
 	 	'tas':
        },
        params_dict = {
 	 	'freq':
        }
        ,climate_func = xclim.indices.winter_rain_ratio)
