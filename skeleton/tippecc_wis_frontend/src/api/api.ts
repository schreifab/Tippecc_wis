/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * Tippecc WIS
 * Your project description
 * OpenAPI spec version: 1.0.0
 */
import {
  createMutation,
  createQuery
} from '@tanstack/svelte-query'
import type {
  CreateMutationOptions,
  CreateQueryOptions,
  CreateQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey
} from '@tanstack/svelte-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  ClimateFunction
} from '../model/climateFunction'
import type {
  ClimateFunctionDetail
} from '../model/climateFunctionDetail'

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;




/**
 * returns data for the api if called

Args:
    request (_type_): _description_

Returns:
    json: list as json
 */
export const apiClimateIndicesList = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ClimateFunction[]>> => {
    
    return axios.get(
      `http://127.0.0.1:8000/api/climate-indices/`,options
    );
  }


export const getApiClimateIndicesListQueryKey = () => {
    return [`http://127.0.0.1:8000/api/climate-indices/`] as const;
    }

    
export const getApiClimateIndicesListQueryOptions = <TData = Awaited<ReturnType<typeof apiClimateIndicesList>>, TError = AxiosError<unknown>>( options?: { query?:CreateQueryOptions<Awaited<ReturnType<typeof apiClimateIndicesList>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiClimateIndicesListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiClimateIndicesList>>> = ({ signal }) => apiClimateIndicesList({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as CreateQueryOptions<Awaited<ReturnType<typeof apiClimateIndicesList>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiClimateIndicesListQueryResult = NonNullable<Awaited<ReturnType<typeof apiClimateIndicesList>>>
export type ApiClimateIndicesListQueryError = AxiosError<unknown>

export const createApiClimateIndicesList = <TData = Awaited<ReturnType<typeof apiClimateIndicesList>>, TError = AxiosError<unknown>>(
  options?: { query?:CreateQueryOptions<Awaited<ReturnType<typeof apiClimateIndicesList>>, TError, TData>, axios?: AxiosRequestConfig}

  ): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getApiClimateIndicesListQueryOptions(options)

  const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * returns data for the api if called

Args:
    request (_type_): _description_

Returns:
    json: list as json
 */
export const apiClimateIndicesRetrieve = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ClimateFunctionDetail>> => {
    
    return axios.get(
      `http://127.0.0.1:8000/api/climate-indices/${id}`,options
    );
  }


export const getApiClimateIndicesRetrieveQueryKey = (id: number,) => {
    return [`http://127.0.0.1:8000/api/climate-indices/${id}`] as const;
    }

    
export const getApiClimateIndicesRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof apiClimateIndicesRetrieve>>, TError = AxiosError<unknown>>(id: number, options?: { query?:CreateQueryOptions<Awaited<ReturnType<typeof apiClimateIndicesRetrieve>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiClimateIndicesRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiClimateIndicesRetrieve>>> = ({ signal }) => apiClimateIndicesRetrieve(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as CreateQueryOptions<Awaited<ReturnType<typeof apiClimateIndicesRetrieve>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiClimateIndicesRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof apiClimateIndicesRetrieve>>>
export type ApiClimateIndicesRetrieveQueryError = AxiosError<unknown>

export const createApiClimateIndicesRetrieve = <TData = Awaited<ReturnType<typeof apiClimateIndicesRetrieve>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:CreateQueryOptions<Awaited<ReturnType<typeof apiClimateIndicesRetrieve>>, TError, TData>, axios?: AxiosRequestConfig}

  ): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getApiClimateIndicesRetrieveQueryOptions(id,options)

  const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * returns data for the api if called

Args:
    request (_type_): _description_

Returns:
    json: list as json
 */
export const apiClimateIndicesCreate = (
    id: number,
    climateFunction: NonReadonly<ClimateFunction>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ClimateFunction[]>> => {
    
    return axios.post(
      `http://127.0.0.1:8000/api/climate-indices/${id}`,
      climateFunction,options
    );
  }



export const getApiClimateIndicesCreateMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof apiClimateIndicesCreate>>, TError,{id: number;data: NonReadonly<ClimateFunction>}, TContext>, axios?: AxiosRequestConfig}
): CreateMutationOptions<Awaited<ReturnType<typeof apiClimateIndicesCreate>>, TError,{id: number;data: NonReadonly<ClimateFunction>}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiClimateIndicesCreate>>, {id: number;data: NonReadonly<ClimateFunction>}> = (props) => {
          const {id,data} = props ?? {};

          return  apiClimateIndicesCreate(id,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ApiClimateIndicesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof apiClimateIndicesCreate>>>
    export type ApiClimateIndicesCreateMutationBody = NonReadonly<ClimateFunction>
    export type ApiClimateIndicesCreateMutationError = AxiosError<unknown>

    export const createApiClimateIndicesCreate = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof apiClimateIndicesCreate>>, TError,{id: number;data: NonReadonly<ClimateFunction>}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getApiClimateIndicesCreateMutationOptions(options);

      return createMutation(mutationOptions);
    }
    