/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * Tippecc WIS
 * Tippecc WIS is a web-based information system in development with a generic workflow for climate indices calculation
 * OpenAPI spec version: 1.0.0
 */
import {
  createMutation,
  createQuery
} from '@tanstack/svelte-query'
import type {
  CreateMutationOptions,
  CreateQueryOptions,
  CreateQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey
} from '@tanstack/svelte-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  ClimateFunction,
  ClimateFunctionDetail,
  ClimateFunctionRequest,
  ExecuteResponse
} from '.././model'



/**
 * returns a list of all available climate functions
 * @summary Get all available climate functions
 */
export const apiClimateIndicesList = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ClimateFunction[]>> => {
    
    return axios.get(
      `https://leutra.geogr.uni-jena.de/backend_geoportal_fabian/api/climate-indices/`,options
    );
  }


export const getApiClimateIndicesListQueryKey = () => {
    return [`https://leutra.geogr.uni-jena.de/backend_geoportal_fabian/api/climate-indices/`] as const;
    }

    
export const getApiClimateIndicesListQueryOptions = <TData = Awaited<ReturnType<typeof apiClimateIndicesList>>, TError = AxiosError<unknown>>( options?: { query?:CreateQueryOptions<Awaited<ReturnType<typeof apiClimateIndicesList>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiClimateIndicesListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiClimateIndicesList>>> = ({ signal }) => apiClimateIndicesList({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as CreateQueryOptions<Awaited<ReturnType<typeof apiClimateIndicesList>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiClimateIndicesListQueryResult = NonNullable<Awaited<ReturnType<typeof apiClimateIndicesList>>>
export type ApiClimateIndicesListQueryError = AxiosError<unknown>

/**
 * @summary Get all available climate functions
 */
export const createApiClimateIndicesList = <TData = Awaited<ReturnType<typeof apiClimateIndicesList>>, TError = AxiosError<unknown>>(
  options?: { query?:CreateQueryOptions<Awaited<ReturnType<typeof apiClimateIndicesList>>, TError, TData>, axios?: AxiosRequestConfig}

  ): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getApiClimateIndicesListQueryOptions(options)

  const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Returns all information of a function by its id
 * @summary Get details for climate function
 */
export const apiClimateIndicesRetrieve = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ClimateFunctionDetail>> => {
    
    return axios.get(
      `https://leutra.geogr.uni-jena.de/backend_geoportal_fabian/api/climate-indices/${id}`,options
    );
  }


export const getApiClimateIndicesRetrieveQueryKey = (id: number,) => {
    return [`https://leutra.geogr.uni-jena.de/backend_geoportal_fabian/api/climate-indices/${id}`] as const;
    }

    
export const getApiClimateIndicesRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof apiClimateIndicesRetrieve>>, TError = AxiosError<void>>(id: number, options?: { query?:CreateQueryOptions<Awaited<ReturnType<typeof apiClimateIndicesRetrieve>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiClimateIndicesRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiClimateIndicesRetrieve>>> = ({ signal }) => apiClimateIndicesRetrieve(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as CreateQueryOptions<Awaited<ReturnType<typeof apiClimateIndicesRetrieve>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiClimateIndicesRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof apiClimateIndicesRetrieve>>>
export type ApiClimateIndicesRetrieveQueryError = AxiosError<void>

/**
 * @summary Get details for climate function
 */
export const createApiClimateIndicesRetrieve = <TData = Awaited<ReturnType<typeof apiClimateIndicesRetrieve>>, TError = AxiosError<void>>(
 id: number, options?: { query?:CreateQueryOptions<Awaited<ReturnType<typeof apiClimateIndicesRetrieve>>, TError, TData>, axios?: AxiosRequestConfig}

  ): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getApiClimateIndicesRetrieveQueryOptions(id,options)

  const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * execute climate function by its id
 * @summary execute climate function
 */
export const apiClimateIndicesCreate = (
    id: number,
    climateFunctionRequest: ClimateFunctionRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ExecuteResponse>> => {
    
    return axios.post(
      `https://leutra.geogr.uni-jena.de/backend_geoportal_fabian/api/climate-indices/${id}`,
      climateFunctionRequest,options
    );
  }



export const getApiClimateIndicesCreateMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof apiClimateIndicesCreate>>, TError,{id: number;data: ClimateFunctionRequest}, TContext>, axios?: AxiosRequestConfig}
): CreateMutationOptions<Awaited<ReturnType<typeof apiClimateIndicesCreate>>, TError,{id: number;data: ClimateFunctionRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiClimateIndicesCreate>>, {id: number;data: ClimateFunctionRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  apiClimateIndicesCreate(id,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ApiClimateIndicesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof apiClimateIndicesCreate>>>
    export type ApiClimateIndicesCreateMutationBody = ClimateFunctionRequest
    export type ApiClimateIndicesCreateMutationError = AxiosError<void>

    /**
 * @summary execute climate function
 */
export const createApiClimateIndicesCreate = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof apiClimateIndicesCreate>>, TError,{id: number;data: ClimateFunctionRequest}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getApiClimateIndicesCreateMutationOptions(options);

      return createMutation(mutationOptions);
    }
    